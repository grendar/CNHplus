results.dir = './absolute_out/',
sample.name = 'TCGA-AJ-A3EJ-01A-11D-A19X-01')  #'TCGA-OR-A5J1-01A-11D-A29H-01')
setwd("~/2022/sep/CNHplus/_R")
ls()
GetAbsSegDat = function (segobj, at)
{
Q = 15
qq = Q
seg_qz_tab = segobj$mode.res$seg.qz.tab[1, , ]
seg_q_tab = segobj$mode.res$seg.q.tab[1, , ]
max_mat <- apply(seg_qz_tab, MARGIN = 1, function(x) which.max(x))
subclonal_ix = (max_mat == (Q + 1))
max_mat = apply(seg_q_tab, MARGIN = 1, function(x) which.max(x))
exp_mat = apply(seg_q_tab, MARGIN = 1, function(x) {
x <- x[1:qq]/sum(x[1:qq])
return(sum(x * c(1:qq)))
})
seg_list <- segobj$segtab
modal_cn = vector(mode = "numeric", length = nrow(seg_list))
expected_cn = vector(mode = "numeric", length = nrow(seg_list))
hz = vector(mode = "numeric", length = nrow(seg_list))
subclonal = vector(mode = "numeric", length = nrow(seg_list))
copy_ratio = vector(mode = "numeric", length = nrow(seg_list))
cancer_cell_frac = vector(mode = "numeric", length = nrow(seg_list))
ccf_ci95_low = vector(mode = "numeric", length = nrow(seg_list))
ccf_ci95_high = vector(mode = "numeric", length = nrow(seg_list))
sc_tab = segobj$mode.res$subclonal_SCNA_res$subclonal_SCNA_tab[1,
, ]
ccf_hat = round(sc_tab[, "CCF_hat"], 5)
ccf_ci95 = round(sc_tab[, c("CI95_low", "CI95_high")], 5)
for (i in seq_len(nrow(seg_list))) {
hscr = ABSOLUTE::InvAtten(seg_list[i, "copy_num"], at)
copy_ratio[i] = round(sum(hscr)/2, 5)
modal_cn[i] = max_mat[i] - 1
expected_cn[i] = round(exp_mat[i] - 1, 5)
subclonal[i] = subclonal_ix[i]
cancer_cell_frac[i] = ccf_hat[i]
ccf_ci95_low[i] = ccf_ci95[i, 1]
ccf_ci95_high[i] = ccf_ci95[i, 2]
if (modal_cn[i] == 0) {
hz[i] = 1
}
}
ix = which(colnames(seg_list) %in% c("copy_num"))
tab = round(seg_list[, c(-ix)], 5)
return(cbind(tab, copy_ratio, modal_cn, expected_cn, subclonal,
cancer_cell_frac, ccf_ci95_low, ccf_ci95_high, hz))
}
# SS:
# running ABSOLUTE ends up with fncs and objects created in workspace
# one of them is fnc GetAbsSegDat()
# which can be ran on the seg.dat object that was stored by ABSOLUTE
# into the RData file
#
# =>
oo = GetAbsSegDat(seg.dat)
GetAbsSegDat = function (segobj, at)
{
Q = 15
qq = Q
seg_qz_tab = segobj$mode.res$seg.qz.tab[1, , ]
seg_q_tab = segobj$mode.res$seg.q.tab[1, , ]
max_mat <- apply(seg_qz_tab, MARGIN = 1, function(x) which.max(x))
subclonal_ix = (max_mat == (Q + 1))
max_mat = apply(seg_q_tab, MARGIN = 1, function(x) which.max(x))
exp_mat = apply(seg_q_tab, MARGIN = 1, function(x) {
x <- x[1:qq]/sum(x[1:qq])
return(sum(x * c(1:qq)))
})
seg_list <- segobj$segtab
modal_cn = vector(mode = "numeric", length = nrow(seg_list))
expected_cn = vector(mode = "numeric", length = nrow(seg_list))
hz = vector(mode = "numeric", length = nrow(seg_list))
subclonal = vector(mode = "numeric", length = nrow(seg_list))
copy_ratio = vector(mode = "numeric", length = nrow(seg_list))
cancer_cell_frac = vector(mode = "numeric", length = nrow(seg_list))
ccf_ci95_low = vector(mode = "numeric", length = nrow(seg_list))
ccf_ci95_high = vector(mode = "numeric", length = nrow(seg_list))
sc_tab = segobj$mode.res$subclonal_SCNA_res$subclonal_SCNA_tab[1,
, ]
ccf_hat = round(sc_tab[, "CCF_hat"], 5)
ccf_ci95 = round(sc_tab[, c("CI95_low", "CI95_high")], 5)
for (i in seq_len(nrow(seg_list))) {
hscr = InvAtten(seg_list[i, "copy_num"], at)
copy_ratio[i] = round(sum(hscr)/2, 5)
modal_cn[i] = max_mat[i] - 1
expected_cn[i] = round(exp_mat[i] - 1, 5)
subclonal[i] = subclonal_ix[i]
cancer_cell_frac[i] = ccf_hat[i]
ccf_ci95_low[i] = ccf_ci95[i, 1]
ccf_ci95_high[i] = ccf_ci95[i, 2]
if (modal_cn[i] == 0) {
hz[i] = 1
}
}
ix = which(colnames(seg_list) %in% c("copy_num"))
tab = round(seg_list[, c(-ix)], 5)
return(cbind(tab, copy_ratio, modal_cn, expected_cn, subclonal,
cancer_cell_frac, ccf_ci95_low, ccf_ci95_high, hz))
}
InvAtten
InvAtten = function (x, at)
{
return(x)
}
# SS:
# running ABSOLUTE ends up with fncs and objects created in workspace
# one of them is fnc GetAbsSegDat()
# which can be ran on the seg.dat object that was stored by ABSOLUTE
# into the RData file
#
# =>
oo = GetAbsSegDat(seg.dat)
names(oo)
plot_profile(sa, cn = oo$expected_cn, #oo$modal_cn,
# filename = 'ABSOLUTE_ACN_TCGA-AJ-A3EJ-01A-11D-A19X-01_expected.tiff',
ylab = 'ACN recovered by ABSOLUTE',
ylim = c(0,10))
#
relative_to_absolute_cn(2^sa$Segment_Mean, 0.63, 3.02)
#
acn = relative_to_absolute_cn(2^sa$Segment_Mean, 0.63, 3.02)
summary(acn)
seg_qz_tab = segobj$mode.res$seg.qz.tab[1, , ]
ls()
seobj = seg.dat
seg_qz_tab = segobj$mode.res$seg.qz.tab[1, , ]
segobj = seg.dat
seg_qz_tab = segobj$mode.res$seg.qz.tab[1, , ]
dim(seq_qz_tab)
dim(seg_qz_tab)
seg_qz_tab[1:5, 1:10]
seg_q_tab = segobj$mode.res$seg.q.tab[1, , ]
max_mat <- apply(seg_qz_tab, MARGIN = 1, function(x) which.max(x))
dim(max_mat)
length(max_mat)
max_mat[1:5]
Q = 15
qq = Q
subclonal_ix = (max_mat == (Q + 1))
subclonal_ix
max_mat = apply(seg_q_tab, MARGIN = 1, function(x) which.max(x))
exp_mat = apply(seg_q_tab, MARGIN = 1, function(x) {
x <- x[1:qq]/sum(x[1:qq])
return(sum(x * c(1:qq)))
})
dim(max_mat)
length(max_mat)
max_mat[1:5]
seg_list <- segobj$segtab
seg_list[[1]]
seg_list[[2]]
seg_list[[3]]
seg_list[[4]]
seg_list[[5]]
seg_list[[6]]
seg_list[[7]]
modal_cn = vector(mode = "numeric", length = nrow(seg_list))
expected_cn = vector(mode = "numeric", length = nrow(seg_list))
hz = vector(mode = "numeric", length = nrow(seg_list))
subclonal = vector(mode = "numeric", length = nrow(seg_list))
copy_ratio = vector(mode = "numeric", length = nrow(seg_list))
cancer_cell_frac = vector(mode = "numeric", length = nrow(seg_list))
ccf_ci95_low = vector(mode = "numeric", length = nrow(seg_list))
ccf_ci95_high = vector(mode = "numeric", length = nrow(seg_list))
sc_tab = segobj$mode.res$subclonal_SCNA_res$subclonal_SCNA_tab[1,
,]
length(expected_cn)
expected_cn[1:5]
modal_cn = max_mat - 1
head(modal_cn)
head(seg_q_tab)
head(seg_qz_tab)
setwd("~/2022/sep/CNHplus/_R")
# libs
library(CNHplus)
# ABSOLUTE purity for vD samples
abt = read.csv('../_ABSOLUTE_purity_ploidy/TCGA_mastercalls.abs_tables_JSedit.fixed.csv')
head(abt) # ok
# cnh+ purity, ploidy data
da = read.csv('TCGA_results.csv')
# match absolute samples w res
im = match(oo$sample, abt$sample)
# match absolute samples w res
im = match(da$sample, abt$sample)
#
dd = cbind(da, abt[im,])
head(dd)
#
dd = dd[,c(1:8, 12:14, 16:18)]
names(dd) = c(names(dd)[1:8], 'absolute_purity', 'absolute_ploidy', names(dd)[11:14])
head(dd)
# save it
write.csv(dd, 'CNHplus_and_ABSOLUTE_purity_ploidy.csv', quote = F, row.names = F)
library(ggpubr)
names(dd)
# densityplot
ggdensity(dd, x = 'absolute_purity')
ggdensity(dd, x = 'purity_plus')
# densityplot
ggdensity(dd, x = 'absolute_purity', title = 'Density plot of tumor purity estimated by ABSOLUTE')
ggdensity(dd, x = 'purity_plus', title = 'Density plot of tumor purity estimated by CNH+')
#
summary(dd$absolute_purity)
#    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's
#  0.080   0.470   0.650   0.629   0.800   1.000    1176
#
nrow(dd)
1176/10578
# 1176/10578 # 11.1% of samples do not have tumor purity estimates
#
summary(dd$purity_plus)
# crossplot
ggscatter(dd, x = 'purity_plus', y = 'absolute_purity')
# crossplot
ggscatter(dd, x = 'purity_plus', y = 'absolute_purity', add = 'loess')
# crossplot
ggscatter(dd, x = 'purity_plus', y = 'absolute_purity', add = 'line')
# crossplot
ggscatter(dd, x = 'purity_plus', y = 'absolute_purity', add = 'reg.line')
# crossplot
ggscatter(dd, x = 'purity_plus', y = 'absolute_purity', add = 'reg.line', ellipse = T)
ggscatter(dd, x = 'purity_plus', y = 'absolute_purity',
add = 'reg.line', cor.coef = T)
ggscatter(dd, x = 'purity_plus', y = 'absolute_purity',
xlab = 'Tumor purity estimated by CNH+',
ylab = 'Tumor purity estimated by ABSOLUTE',
add = 'reg.line', cor.coef = T)
# densityplot for tumor ploidy
#
ggdensity(dd, x = 'absolute_ploidy', title = 'Density plot of tumor ploidy estimated by ABSOLUTE')
ggdensity(dd, x = 'ploidy_plus', title = 'Density plot of tumor ploidy estimated by CNH+')
ggdensity(dd, x = 'absolute_ploidy',
title = 'Density plot of tumor ploidy estimated by ABSOLUTE',
xlab = 'Tumor ploidy')
ggdensity(dd, x = 'ploidy_plus',
title = 'Density plot of tumor ploidy estimated by CNH+',
xlab = 'Tumor ploidy')
ggdensity(dd, x = 'absolute_purity',
title = 'Density plot of tumor purity estimated by ABSOLUTE',
xlab = 'Tumor purity')
ggscatter(dd, x = 'ploidy_plus', y = 'absolute_ploidy',
xlab = 'Tumor ploidy estimated by CNH+',
ylab = 'Tumor ploidy estimated by ABSOLUTE',
add = 'reg.line', cor.coef = T)
ggscatter(dd, x = 'ploidy_plus', y = 'absolute_ploidy',
xlab = 'Tumor ploidy estimated by CNH+',
ylab = 'Tumor ploidy estimated by ABSOLUTE')
names(dd)
ggscatter(dd, x = 'purity', y = 'absolute_purity',
xlab = 'Tumor purity estimated by CNH',
ylab = 'Tumor purity estimated by ABSOLUTE',
add = 'reg.line', cor.coef = T)
pu_ABS = ggdensity(dd, x = 'absolute_purity',
title = 'Density plot of tumor purity estimated by ABSOLUTE',
xlab = 'Tumor purity')
pu_cnhplus = ggdensity(dd, x = 'purity_plus',
title = 'Density plot of tumor purity estimated by CNH+',
xlab = 'Tumor purity')
#
ggarrange(plotlist = list(pu_ABS, pu_cnhplus))
#
gga = ggarrange(plotlist = list(pu_ABS, pu_cnhplus), labels = 'AUTO')
gga
?tiff
ggsave(filename = 'purity_ABSOLUTE_vs_CNHplus.tiff', plot = gga,
device = 'tiff',
units = 'cm',
width = 20,
heiight = 20,
compression = 'lzw')
ggsave(filename = 'purity_ABSOLUTE_vs_CNHplus.tiff', plot = gga,
device = 'tiff',
units = 'cm',
width = 20,
height = 20,
pointsize = 8,
compression = 'lzw')
ggsave(filename = 'purity_ABSOLUTE_vs_CNHplus.tiff', plot = gga,
device = 'tiff',
units = 'cm',
width = 25,
height = 15,
pointsize = 8,
compression = 'lzw')
pu_ABS = ggdensity(dd, x = 'absolute_purity',
title = 'Density plot of tumor purity\\ estimated by ABSOLUTE',
xlab = 'Tumor purity')
pu_ABS
ggsave(filename = 'purity_ABSOLUTE_vs_CNHplus.tiff', plot = gga,
device = 'tiff',
units = 'cm',
width = 50,
height = 15,
pointsize = 8,
compression = 'lzw')
ggsave(filename = 'purity_ABSOLUTE_vs_CNHplus.tiff', plot = gga,
device = 'tiff',
units = 'cm',
width = 30,
height = 15,
pointsize = 8,
compression = 'lzw')
ggsave(filename = 'purity_ABSOLUTE_vs_CNHplus.tiff', plot = gga,
device = 'tiff',
units = 'cm',
width = 35,
height = 15,
pointsize = 8,
compression = 'lzw')
pu_scat = ggscatter(dd, x = 'purity_plus', y = 'absolute_purity',
xlab = 'Tumor purity estimated by CNH+',
ylab = 'Tumor purity estimated by ABSOLUTE',
add = 'reg.line', cor.coef = T)
#
gga = ggarrange(plotlist = list(pu_ABS, pu_cnhplus, pu_scat), labels = 'AUTO')
gga
gga = ggarrange(plotlist = list(pu_ABS, pu_cnhplus, pu_scat),
ncol = 3, nrow = 1,
labels = 'AUTO')
gga
pu_ABS = ggdensity(dd, x = 'absolute_purity',
title = 'ABSOLUTE', # Density plot of tumor purity estimated by ABSOLUTE',
xlab = 'Tumor purity')
pu_cnhplus = ggdensity(dd, x = 'purity_plus',
title = 'CNH+', #'Density plot of tumor purity estimated by CNH+',
xlab = 'Tumor purity')
gga = ggarrange(plotlist = list(pu_ABS, pu_cnhplus), labels = 'AUTO')
gga
# save it
ggsave(filename = 'purity_ABSOLUTE_vs_CNHplus.tiff', plot = gga,
device = 'tiff',
units = 'cm',
width = 35,
height = 15,
pointsize = 8,
compression = 'lzw')
gga = ggarrange(plotlist = list(pu_ABS, pu_cnhplus, pu_scat),
ncol = 3, nrow = 1,
labels = 'AUTO')
gga
ggsave(filename = 'purity_ABSOLUTE_vs_CNHplus_3plot.tiff', plot = gga,
device = 'tiff',
units = 'cm',
width = 75,
height = 15,
pointsize = 8,
compression = 'lzw')
ggsave(filename = 'purity_ABSOLUTE_vs_CNHplus_3plot.tiff', plot = gga,
device = 'tiff',
units = 'cm',
width = 50,
height = 15,
pointsize = 8,
compression = 'lzw')
pl_ABS = ggdensity(dd, x = 'absolute_ploidy',
title = 'ABSOLUTE', #'Density plot of tumor ploidy estimated by ABSOLUTE',
xlab = 'Tumor ploidy')
pl_cnhplus = ggdensity(dd, x = 'ploidy_plus',
title = 'CNH+', # 'Density plot of tumor ploidy estimated by CNH+',
xlab = 'Tumor ploidy')
#
#
# crossplot
pl_scat = ggscatter(dd, x = 'ploidy_plus', y = 'absolute_ploidy',
xlab = 'Tumor ploidy estimated by CNH+',
ylab = 'Tumor ploidy estimated by ABSOLUTE')
gga = ggarrange(plotlist = list(pl_ABS, pl_cnhplus, pl_scat),
ncol = 3, nrow = 1,
labels = 'AUTO')
gga
# save it
ggsave(filename = 'ploidy_ABSOLUTE_vs_CNHplus_3plot.tiff', plot = gga,
device = 'tiff',
units = 'cm',
width = 50,
height = 15,
pointsize = 8,
compression = 'lzw')
ggscatter(dd, x = 'purity', y = 'absolute_purity',
xlab = 'Tumor purity estimated by CNH',
ylab = 'Tumor purity estimated by ABSOLUTE',
add = 'reg.line', cor.coef = T)
100 - 11.1
setwd("~/2022/sep/CNHplus/_ABSOLUTE_purity_ploidy")
library(ABSOLUTE)
################################################################################
#
# fncs
#
#
InvAtten = function (x, at)
{
return(x)
}
GetAbsSegDat = function (segobj, at)
{
Q = 15
qq = Q
seg_qz_tab = segobj$mode.res$seg.qz.tab[1, , ]
seg_q_tab = segobj$mode.res$seg.q.tab[1, , ]
max_mat <- apply(seg_qz_tab, MARGIN = 1, function(x) which.max(x))
subclonal_ix = (max_mat == (Q + 1))
max_mat = apply(seg_q_tab, MARGIN = 1, function(x) which.max(x))
exp_mat = apply(seg_q_tab, MARGIN = 1, function(x) {
x <- x[1:qq]/sum(x[1:qq])
return(sum(x * c(1:qq)))
})
seg_list <- segobj$segtab
modal_cn = vector(mode = "numeric", length = nrow(seg_list))
expected_cn = vector(mode = "numeric", length = nrow(seg_list))
hz = vector(mode = "numeric", length = nrow(seg_list))
subclonal = vector(mode = "numeric", length = nrow(seg_list))
copy_ratio = vector(mode = "numeric", length = nrow(seg_list))
cancer_cell_frac = vector(mode = "numeric", length = nrow(seg_list))
ccf_ci95_low = vector(mode = "numeric", length = nrow(seg_list))
ccf_ci95_high = vector(mode = "numeric", length = nrow(seg_list))
sc_tab = segobj$mode.res$subclonal_SCNA_res$subclonal_SCNA_tab[1,
, ]
ccf_hat = round(sc_tab[, "CCF_hat"], 5)
ccf_ci95 = round(sc_tab[, c("CI95_low", "CI95_high")], 5)
for (i in seq_len(nrow(seg_list))) {
hscr = InvAtten(seg_list[i, "copy_num"], at)
copy_ratio[i] = round(sum(hscr)/2, 5)
modal_cn[i] = max_mat[i] - 1
expected_cn[i] = round(exp_mat[i] - 1, 5)
subclonal[i] = subclonal_ix[i]
cancer_cell_frac[i] = ccf_hat[i]
ccf_ci95_low[i] = ccf_ci95[i, 1]
ccf_ci95_high[i] = ccf_ci95[i, 2]
if (modal_cn[i] == 0) {
hz[i] = 1
}
}
ix = which(colnames(seg_list) %in% c("copy_num"))
tab = round(seg_list[, c(-ix)], 5)
return(cbind(tab, copy_ratio, modal_cn, expected_cn, subclonal,
cancer_cell_frac, ccf_ci95_low, ccf_ci95_high, hz))
}
load('../_ABSOLUTE_purity_ploidy/absolute_out/TCGA-AJ-A3EJ-01A-11D-A19X-01.ABSOLUTE.RData')
# SS:
# running ABSOLUTE ends up with fncs and objects created in workspace
# one of them is fnc GetAbsSegDat()
# which can be ran on the seg.dat object that was stored by ABSOLUTE
# into the RData file
#
# =>
oo = GetAbsSegDat(seg.dat)
library(CNHplus)
#
sa = read.csv('../_R/sample_data.csv')
plot_profile(sa, cn = oo$expected_cn, #oo$modal_cn,
# filename = 'ABSOLUTE_ACN_TCGA-AJ-A3EJ-01A-11D-A19X-01_expected.tiff',
ylab = 'ACN recovered by ABSOLUTE',
ylim = c(0,10))
plot_profile(sa, cn = oo$expected_cn, #oo$modal_cn,
filename = 'ABSOLUTE_ACN_TCGA-AJ-A3EJ-01A-11D-A19X-01_expected.tiff',
ylab = 'ACN recovered by ABSOLUTE',
ylim = c(0,10))
plot_profile(sa, cn = oo$expected_cn, #oo$modal_cn,
filename = 'ABSOLUTE_ACN_TCGA-AJ-A3EJ-01A-11D-A19X-01_expected.tiff',
ylab = 'ACN recovered by ABSOLUTE',
ylim = c(0,10))
getwd()
abs = read.csv('../_ABSOLUTE_purity_ploidy/TCGA_mastercalls.abs_tables_JSedit.fixed.csv')
ii = which(abs$sample == 'TCGA-AJ-A3EJ-01A-11D-A19X-01')
abs[ii,]
abs[ii,]$purity
abs[ii,]$ploidy
#
acn = relative_to_absolute_cn(2^sa$Segment_Mean, 0.63, 3.02)
plot_profile(sa, cn = acn, #oo$modal_cn,
filename = 'ABSOLUTE_ACN_TCGA-AJ-A3EJ-01A-11D-A19X-01_puplo.tiff',
ylab = 'ACN for purity, ploidy estimated by ABSOLUTE',
ylim = c(-2,10))
setwd("~/2022/sep/CNHplus/_R")
source('~/2022/sep/CNHplus/_R/comparing_ABSOLUTE_CNHplus_purity_ploidy__Sep19_2022.R')
10578-1176
load('../_papers/supp_data.RDATA')
ls()
data_readcounts
data_segmented
gga
abt
ls()
ABSO
install.packages('memoise')
?cache_filesystem
library(CNHplus)
library(usethis)
use_github()
pkgdown::build_site()
pkgdown::build_site()
library(CNHplus)
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
?gh_token_help
gh_token_help)_
gh_token_help()
library(usethis)
gh_token_help()
create_github_token()
gitcreds::gitcreds_set()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
library(CNHplus)
library(CNHplus)
library(CNHplus)
pkgdown::build_site
pkgdown::build_site()
