for (i in 1:Nploidy){
a1((i-1)*Npurity+1:i*Npurity) = (purity*ploidy(i)+2*(1-purity))./purity
a2((i-1)*Npurity+1:i*Npurity) = -2*(1-purity)./purity
purity_all( (i-1)*Npurity+1:i*Npurity) = purity
ploidy_all( (i-1)*Npurity+1:i*Npurity) = ploidy(i)*rep(1, 1)
}
# iniatilize output: CNH_out, ploidy_out and purity_out
CNH_out = 1
purity_out = 0
ploidy_out = 0
# grid search over all ploidies and purities to infer CNH
for (i in 1:Nploidy*Npurity){
# transform relative copy numbers to absolute numbers
q = a1(i)*seg_val+a2(i)
# measure distance to closest integer value of each segment
q_dist_down = (1 %% 2)
q_dist_up = 1-(1 %% 2)
q_dist_min = min(q_dist_up,q_dist_down)
# calculate the mean distance of segments to integer values,
# weighted by segment length
CNHnew = sum(q_dist_min.*seg_len) / (sum(seg_len))
# if the new weighted distance to integers is smaller than any
# previously calculated, replace CNH_out, ploidy_out and purity_out with the new values.
if (CNHnew < CNH_out){
CNH_out = CNHnew
purity_out = purity_all(i)
ploidy_out = ploidy_all(i)
}
}
}
purity_all( (i-1)*Npurity+1:i*Npurity) = purity
ploidy_all( (i-1)*Npurity+1:i*Npurity) = ploidy(i)*ones(Npurity,1)
}
# iniatilize output: CNH_out, ploidy_out and purity_out
CNH_out = 1
purity_out = 0
ploidy_out = 0
# grid search over all ploidies and purities to infer CNH
for (i in 1:Nploidy*Npurity){
# transform relative copy numbers to absolute numbers
q = a1(i)*seg_val+a2(i)
# measure distance to closest integer value of each segment
q_dist_down = mod(q,1)
q_dist_up = 1-mod(q,1)
q_dist_min = min(q_dist_up,q_dist_down)
# calculate the mean distance of segments to integer values,
# weighted by segment length
CNHnew = sum(q_dist_min.*seg_len) / (sum(seg_len))
# if the new weighted distance to integers is smaller than any
# previously calculated, replace CNH_out, ploidy_out and purity_out
# with the new values.
if (CNHnew < CNH_out){
CNH_out = CNHnew
purity_out = purity_all(i)
ploidy_out = ploidy_all(i)
}
}
}
CNH = function(seg_val ,seg_len, ploidy, purity){
# check if input seg_val and seg_len are vectors of equal size
#  if !( isvector(seg_val) && isvector(seg_len) && length(seg_val) == numel(seg_val) == 1){
#    stop('Segment values (1st input argument) and segment lengths (second input argument) appear not to be column vectors of equal length')
#  }
#  # check if ploidy is scalar argument or empty
#  if !( (isscalar(ploidy) && ploidy > 0) || isempty(ploidy) ){
#    stop('Ploidy is not a positive scalar or empty')
#  }
#  # check if purity is a scalar between 0 and 1 argument or empty
#  if !( (isscalar(purity) && purity > 0 && purity <=1 ) || isempty(purity) ){
#    stop('Purity is not a positive scalar or empty')
#  }
# specify default range of ploidy for grid search, if input ploidy is empty
if (is.null(ploidy)){
ploidy = seq(1.5, 5, 0.01) # 1.5:0.01:5# tumor ploidy
}
# specify default range of purity purity for grid search, if input purity is empty
if (is.null(purity)){
purity = seq(0.2, 1, 0.01) # 0.2:0.01:1# tumor purity: standard range
}
#
# get number of ploidies and purities for grid search
Nploidy = length(ploidy)
Npurity = length(purity)
# initialize vectors a1 and a2 from all combinations of ploidy and purity, for the transformation of
# measured relative copy number profile (seg_val) to absolute values (q) using
#  q = seg_val*a1+a2.
a1 = rep(0, 1)
a2 = rep(0, 1)
purity_all = rep(0, 1)# vector that contains all purities used in 2D grid search
ploidy_all = rep(0, 1)# vector that contains all ploidies used in 2D grid search
for (i in 1:Nploidy){
a1((i-1)*Npurity+1:i*Npurity) = (purity*ploidy(i)+2*(1-purity))./purity
a2((i-1)*Npurity+1:i*Npurity) = -2*(1-purity)./purity
purity_all( (i-1)*Npurity+1:i*Npurity) = purity
ploidy_all( (i-1)*Npurity+1:i*Npurity) = ploidy(i)*rep(1, 1)
}
# iniatilize output: CNH_out, ploidy_out and purity_out
CNH_out = 1
purity_out = 0
ploidy_out = 0
# grid search over all ploidies and purities to infer CNH
for (i in 1:Nploidy*Npurity){
# transform relative copy numbers to absolute numbers
q = a1(i)*seg_val+a2(i)
# measure distance to closest integer value of each segment
q_dist_down = (1 %% 2)
q_dist_up = 1-(1 %% 2)
q_dist_min = min(q_dist_up,q_dist_down)
# calculate the mean distance of segments to integer values,
# weighted by segment length
CNHnew = sum(q_dist_min.*seg_len) / (sum(seg_len))
# if the new weighted distance to integers is smaller than any
# previously calculated, replace CNH_out, ploidy_out and purity_out with the new values.
if (CNHnew < CNH_out){
CNH_out = CNHnew
purity_out = purity_all(i)
ploidy_out = ploidy_all(i)
}
}
}
purity_all( (i-1)*Npurity+1:i*Npurity) = purity
ploidy_all( (i-1)*Npurity+1:i*Npurity) = ploidy(i)*ones(Npurity,1)
}
# iniatilize output: CNH_out, ploidy_out and purity_out
CNH_out = 1
purity_out = 0
ploidy_out = 0
# grid search over all ploidies and purities to infer CNH
for (i in 1:Nploidy*Npurity){
# transform relative copy numbers to absolute numbers
q = a1(i)*seg_val+a2(i)
# measure distance to closest integer value of each segment
q_dist_down = mod(q,1)
q_dist_up = 1-mod(q,1)
q_dist_min = min(q_dist_up,q_dist_down)
# calculate the mean distance of segments to integer values,
# weighted by segment length
CNHnew = sum(q_dist_min.*seg_len) / (sum(seg_len))
# if the new weighted distance to integers is smaller than any
# previously calculated, replace CNH_out, ploidy_out and purity_out
# with the new values.
if (CNHnew < CNH_out){
CNH_out = CNHnew
purity_out = purity_all(i)
ploidy_out = ploidy_all(i)
}
}
}
ploidy=NULL
purity=NULL
if (is.null(ploidy)){
ploidy = seq(1.5, 5, 0.01) # 1.5:0.01:5# tumor ploidy
}
if (is.null(purity)){
purity = seq(0.2, 1, 0.01) # 0.2:0.01:1# tumor purity: standard range
}
Nploidy = length(ploidy)
Npurity = length(purity)
Nploidy
Npurity
a1 = rep(0, 1)
a2 = rep(0, 1)
purity_all = rep(0, 1)# vector that contains all purities used in 2D grid search
ploidy_all = rep(0, 1)# vector that contains all ploidies used in 2D grid search
for (i in 1:Nploidy){
a1((i-1)*Npurity+1:i*Npurity) = (purity*ploidy(i)+2*(1-purity))./purity
a2((i-1)*Npurity+1:i*Npurity) = -2*(1-purity)./purity
purity_all( (i-1)*Npurity+1:i*Npurity) = purity
ploidy_all( (i-1)*Npurity+1:i*Npurity) = ploidy(i)*rep(1, 1)
}
devtools::install_github('renozao/RcppOctave')
devtools::install_github("kvasilopoulos/octaver")
library(octaver)
find_octave()
pr <- OctaveSession$new()
pr$eval("2+2")
# ans = 4
# ok
#
pr$eval("A = 2+2")
#> A  =  4
pr$eval("A")
#> A  =  4
# ok
#
pr$kill()
A
library(help = octaver)
# run m code
ma = mat_read('~/2022/may/CNH/_matlab/CNH.m')
# run m code
oct('~/2022/may/CNH/_matlab/CNH.m')
?OctaveREPL
library(dplyr)
library(cBioPortalData)
library(stringi)
# data
cbio = cBioPortal()
# TCGA
studies <- getStudies(cbio)
ii = do.call(rbind, studies$name %>% stri_locate_all_fixed('TCGA'))[,1]
ii = which(is.na(ii)  == F)
studies$name[ii]
studies$studyId[ii]
# TCGA ACC
tr = cBioDataPack(studies$studyId[ii[1]], ask = FALSE)
tr@ExperimentList$cna_hg19.seg
tr@ExperimentList$cna
dd = tr@ExperimentList$cna_hg19.seg
dim(dd)
head(dd)
dd@assays
dd@assays$`TCGA-OR-A5J1-01`
dd@assays$`TCGA-OR-A5J1-01`@ranges
dd@assays$`TCGA-OR-A5J1-01`@ranges@width
width = dd@assays$`TCGA-OR-A5J1-01`@ranges@width
dd@assays$`TCGA-OR-A5J1-01`@seg.mean
dd@assays$`TCGA-OR-A5J1-01`@seqinfo
dd@assays$`TCGA-OR-A5J1-01`$seg.mean
log2cn = dd@assays$`TCGA-OR-A5J1-01`$seg.mean  # seg.mean == mean CN log2 value
seg_len = width
seg_val = 2^log2cn
oct('~/2022/may/CNH/_matlab/CNH.m',
echo = T,
args = c('seg_val', 'seg_len'))
oo = oct('~/2022/may/CNH/_matlab/CNH.m',
echo = T,
args = c('seg_val', 'seg_len'))
#
oo
# NOTE:
# width is seg_len
# 2^log2cn is seg_val
#
# save it
oo = data.frame(seg_val = 2^log2cn, seg_len = width)
dd@assays@metadata
dd@assays@unlistData
dd@rowidx
dd@metadata
tr@metadata
tr@sampleMap
write.csv(oo, 'TCGA-OR-A5J1.csv', quote = F, row.names = F)
getwd()
install.packages('R.matlab')
library(R.matlab)
library(help = R.matlab)
# save it as mat file
seg_val = 2^log2cn
seg_len = width
R.matlab::writeMat('TCGA-OR-A5J1.mat', seg_val, seg_len)
R.matlab::writeMat('TCGA-OR-A5J1.mat', seg_val = seg_val, seg_len = seg_len)
0.022427248399632 - 0.003407156675862
# different sample
width = dd@assays$`TCGA-OR-A5J2-01`@ranges@width
log2cn = dd@assays$`TCGA-OR-A5J2-01`$seg.mean  # seg.mean == mean CN log2 value
seg_val = 2^log2cn
seg_len = width
R.matlab::writeMat('TCGA-OR-A5J2.mat', seg_val = seg_val, seg_len = seg_len)
#
# what if they used log2cn?
seq_val = log2cn
seg_val = log2cn
R.matlab::writeMat('TCGA-OR-A5J2_log.mat', seg_val = seg_val, seg_len = seg_len)
tr@sampleMap
tr@metadata
tr@metadata$name
tr@metadata$mutsig
tr@sampleMap
tr@sampleMap$primary
tr@sampleMap$colname
################################################################################
#
#
library(curatedTCGAData)
BiocManager::install('curatedTCGAData')
curatedTCGAData("ACC", version = "2.0.1", dry.run = TRUE)
################################################################################
#
# https://waldronlab.io/MultiAssayWorkshop/articles/Ramos_MultiAssayExperiment.html
#
library(curatedTCGAData)
curatedTCGAData("ACC", version = "2.0.1", dry.run = TRUE)
acc = curatedTCGAData(
diseaseCode = "ACC",
assays = c(
"miRNASeqGene", "RPPAArray", "Mutation", "RNASeq2GeneNorm", "CNVSNP"
),
version = "2.0.1",
dry.run = FALSE
)
curatedTCGAData("ACC", version = "2.0.1", dry.run = TRUE)
ss = dd@assays$`TCGA-OR-A5J2-01`
ss@elementMetadata
ss$num.mark
ss$seg.mean
tr@ExperimentList
tr@ExperimentList@listData
tr@ExperimentList@listData[[1]]
tr@ExperimentList@listData[[2]]
aux = tr@ExperimentList@listData[[1]]
aux@assays
aux@metadata
aux@rowidx
tr@metadata
tr@drops
tr@sampleMap
tr@colData
names(tr@colData)
################################################################################
#
# https://waldronlab.io/MultiAssayWorkshop/articles/Ramos_MultiAssayExperiment.html
#
library(curatedTCGAData)
curatedTCGAData("ACC", version = "2.0.1", dry.run = TRUE)
acc = curatedTCGAData(
diseaseCode = "ACC",
assays = c(
"miRNASeqGene", "RPPAArray", "Mutation", "RNASeq2GeneNorm", "CNVSNP"
),
version = "2.0.1",
dry.run = FALSE
)
################################################################################
#
# https://waldronlab.io/MultiAssayWorkshop/articles/Ramos_MultiAssayExperiment.html
#
library(curatedTCGAData)
curatedTCGAData("ACC", version = "2.0.1", dry.run = TRUE)
curatedTCGAData("ACC") #, version = "2.0.1", dry.run = TRUE)
acc = curatedTCGAData(
diseaseCode = "ACC",
assays = c(
"CNASNP", "CNVSNP"
),
version = "2.0.1",
dry.run = FALSE
)
acc = curatedTCGAData(
diseaseCode = "ACC",
assays = c(
"CNASNP", "CNVSNP"
),
# version = "2.0.1",
dry.run = FALSE
)
#
tail(colnames(colData(acc)), 10)
acc@ExperimentList
acc@ExperimentList@listData
acc@ExperimentList@listData$`ACC_CNASNP-20160128`
acc@ExperimentList@listData$`ACC_CNASNP-20160128`@assays
acc$purity
acc$ploidy
acc@ExperimentList@metadata
acc@ExperimentList@listData
acc@ExperimentList@listData$`ACC_CNASNP-20160128`@rowidx
acc@ExperimentList@listData$`ACC_CNASNP-20160128`@colidx
acc@ExperimentList@listData$`ACC_CNASNP-20160128`@metadata
acc@ExperimentList@listData$`ACC_CNASNP-2016012
acc@ExperimentList@listData$`ACC_CNASNP-20160128`
acc@ExperimentList@listData$`ACC_CNASNP-20160128`@assays
acc@ExperimentList@listData$`ACC_CNVSNP-20160128`@assays
#
# sample
dd@assays$`TCGA-OR-A5J1-01`
library(dplyr)
library(cBioPortalData)
library(stringi)
# data
cbio = cBioPortal()
# TCGA
studies <- getStudies(cbio)
ii = do.call(rbind, studies$name %>% stri_locate_all_fixed('TCGA'))[,1]
ii = which(is.na(ii)  == F)
studies$name[ii]
studies$studyId[ii]
# acc_tcga
# TCGA ACC
tr = cBioDataPack(studies$studyId[ii[1]], ask = FALSE)
dd = tr@ExperimentList$cna_hg19.seg
dd
#
acc@ExperimentList@listData$`ACC_CNASNP-20160128`@assays
# but CNVSNP (ie germline) have the same id!
acc@ExperimentList@listData$`ACC_CNVSNP-20160128`@assays
da = read.table('2022/may/CNH/_paper/ACC.snp__genome_wide_snp_6__broad_mit_edu__Level_3__segmented_scna_hg19__seg.seg.txt',
sep = '\t')
da = read.table('2022/may/CNH/_paper/ACC.snp__genome_wide_snp_6__broad_mit_edu__Level_3__segmented_scna_hg19__seg.seg.txt',
sep = '\t', header = T)
da$Sample
head(da$Sample)
da = da %>% filter(Sample = 'TCGA-OR-A5J1-10A-01D-A29K-01')
da = read.table('2022/may/CNH/_paper/ACC.snp__genome_wide_snp_6__broad_mit_edu__Level_3__segmented_scna_hg19__seg.seg.txt',
sep = '\t', header = T)
da = da %>% filter(Sample == 'TCGA-OR-A5J1-10A-01D-A29K-01')
table(da$Chromosome)
# compute width
# 1:24 chrs
w = list()
for (i in 1:24) {
#
aux = da %>% filter(Chromosome == i)
w[[i]] = aux$End - aux$Start
#
}
w = unlist(w)
w
#
#
da$Segment_Mean
#
#
2^da$Segment_Mean  # log2
seg_len = w
#
#
seg_val = 2^da$Segment_Mean  # log2
#
# save it as mat
R.matlab::writeMat('TCGA-OR-A5J1_10A', seg_val = seg_val, seg_len = seg_len)
################################################################################
#
#
mod(1.7,1)
################################################################################
#
#
1.7 %% 1
# 1
1 - 1.7%%1
1.7 - round(1.7)
# 0.3
#
# min of the two
# ==
abs(1.7 - round(1.7))
setwd("~/2022/sep/CNHplus/CNHplus/vignettes")
library('CNHplus')
library('TCGAbiolinks')
library('stringi')
library('openxlsx')
library('dplyr')
library('memoise')
data(sample_data)
head(sample_data)
sa = sample_data
sample_name = sa$Sample[1]
r = 2^sa$Segment_Mean
w = sa$End - sa$Start # should be +1
## ---- fig.width=7, fig.height=4, include=T, fig.align='center', fig.show='hold', results=FALSE----
# RCN profile plot
plot_profile(sa, r, paste0(sample_name, '_RCN.tiff'),
ylim = c(0,5), ylab = 'RCN')
## -----------------------------------------------------------------------------
# making grid
grid = make_grid(purity = seq(0.2, 1, 0.01), ploidy = seq(1.5, 5, 0.01))
## -----------------------------------------------------------------------------
# ACN profile for CNH
cnh = find_cnhplus(grid, r = r, w = w, k=2, plus = F)
cnh
## -----------------------------------------------------------------------------
acn_cnh = r2q(r, cnh$purity[1], cnh$ploidy[1])
## ---- fig.width=7, fig.height=4, include=T, fig.align='center', fig.show='hold', results=FALSE----
plot_profile(sa, acn_cnh, paste0(sample_name, '_ACN_for_CNH.tiff'),
ylim = c(-10,10), ylab = 'ACN for CNH')
## ---- fig.width=7, fig.height=4, include=T, fig.align='center', fig.show='hold', results=FALSE----
# ACN profile for CNH+
cnh_plus = find_cnhplus(grid, r = r, w = w, k=2, plus = T)
cnh_plus
#
acn_cnhplus = r2q(r, cnh_plus$purity[1], cnh_plus$ploidy[1])
plot_profile(sa, acn_cnhplus, paste0(sample_name, '_ACN_for_CNHplus.tiff'),
ylim = c(0,10), ylab = 'ACN for CNH+')
study_name = 'READ'
#
query = TCGAbiolinks::GDCquery(legacy = T,
project = paste0('TCGA-', study_name),
data.category = "Copy number variation",
file.type = 'hg19.seg',
platform = "Affymetrix SNP Array 6.0",
sample.type = 'Primary Tumor')
# download segmented_scna_hg19 data
TCGAbiolinks::GDCdownload(query = query,
method = 'client') # "api", files.per.chunk = 10)
data = TCGAbiolinks::GDCprepare(query = query)
da = as.data.frame(data)
head(da)
## -----------------------------------------------------------------------------
# read in the Supplement to van Dijk et al. with results for tumor samples from TCGA studies
vD = openxlsx::read.xlsx("https://static-content.springer.com/esm/art%3A10.1038%2Fs41467-021-23384-6/MediaObjects/41467_2021_23384_MOESM4_ESM.xlsx")
## -----------------------------------------------------------------------------
# filter samples from the study
vDx = vD %>% filter(Type == study_name)
#
# match vD and TCGA
im = match(vDx$Samplename, unique(da$Sample))
im
#
# data frame with RCN for the study samples which were considered by van Dijk et al.
da_vD = da %>% filter(Sample %in% unique(da$Sample)[im])
head(da_vD)
cache = memoise::cache_filesystem('/tmp')
memo_analyze_TCGA_study = memoise::memoise(analyze_TCGA_study, cache = cache)
oo = memo_analyze_TCGA_study(study_name, da_vD, grid, k=2)
oo = analyze_TCGA_study(study_name, da_vD, grid, k=2)
res = read.csv(paste0(study_name, '_results.csv'))
res
gg_cnhplus = plot_survival(study_name, vDx$OS, vDx$OS_event, res$cnh_plus,
type = 'CNH+', ylim = c(0, 1))
gg_cnhplus
source('~/2022/sep/CNHplus/CNHplus/vignettes/CNHplus.R')
